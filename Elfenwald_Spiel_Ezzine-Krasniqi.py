#diverse Module importiert f√ºr bute Ausgaben und n√ºtzliche Funktionen
from rich.console import Console
from rich.prompt import Prompt
from rich.panel import Panel
from rich.progress import Progress
from rich.text import Text
import random
import json

#Rich-Konsole f√ºr bunte und formatierte Ausgabe erstellt
console = Console()

#Speicherfunktion des Spielstandes, um den Forschritt zu sichern und nachzuverfolgen
def save_game(state):
    with open("game_save.json", "w") as file:
        json.dump(state, file)

#Funktion zum Laden des Spielstands, falls einer bereits gespeichert wurde/falls nicht kommt None zur√ºck
def load_game():
    try:
        with open("game_save.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return None

#Funktion um das Spiel jederzeit mit "quit" beenden zu k√∂nnen
def check_quit(input_value):
    if input_value.lower() == "quit":
        console.print("\n[red]Spiel wird beendet. Danke f√ºrs Spielen![/red]")
        exit()

#Begr√º√üt den Spieler in einem schicken Titel-Panel
def create_title_panel():
    return Panel(
        Text("üåü Willkommen zu 'Das Geheimnis des Elfenwaldes'! üåü", justify="center", style="bold cyan"),
        style="green",
        expand=True
    )

#Auswahl-Panel erstellt damit Spieler Optionen ausw√§hlen kann
def create_choice_panel(title, options):
    panel_content = "\n".join(f"[bold magenta]{key}.[/bold magenta] {desc}" for key, desc in options.items())
    return Panel(
        f"{title}\n\n{panel_content}",
        style="bold yellow",
        expand=False
    )

#kurze Einf√ºhrungsgeschichte des Spiels f√ºr Kontext zur Reise durch den Elfenwald
def introduction():
    console.print(Panel(
        "In einer l√§ngst vergangenen Zeit, als Magie und Heldenmut das Land regierten, "
        "wurde der magische Kristall des K√∂nigreichs gestohlen. "
        "Nur die mutigsten Abenteurer k√∂nnen den Frieden wiederherstellen.\n\n"
        "Bist du bereit, dich der Herausforderung zu stellen?\n"
        "Hinweis: Du kannst das Spiel jederzeit mit dem Wort 'quit' beenden",
        style="italic blue",
        expand=True
    ))

#das Spiel wird gestartet
#der Spieler wird zur Geschichte und gleich im Anschluss zur Charakter-Wahl gef√ºhrt
def start_game():
    console.print(create_title_panel())
    introduction()
    character_selection()

#Auswahl eines Charakters: Elfenkrieger oder Elfenmagierin
def character_selection():
    console.print("\n")
    options = {
        "1": "üó° Elfenkrieger",
        "2": "ü™Ñ Elfenmagierin"
    }
    console.print(create_choice_panel("W√§hle deinen Charakter:", options))

    choice = Prompt.ask("Gib [bold]1[/bold] oder [bold]2[/bold] ein")
    check_quit(choice)
    if choice == "1":
        console.print(Panel("[bold white]Du hast den tapferen Elfenkrieger gew√§hlt! M√∂ge dein Schwert dich leiten.[/bold white]", style="bold blue"))
    elif choice == "2":
        console.print(Panel("[bold white]Du hast die weise Elfenmagierin gew√§hlt! M√∂ge deine Magie dich sch√ºtzen.[/bold white]", style="bold purple"))

    enter_forest(choice)

#Spieler kommt in den mystischen Elfenwald, der als ASCII angezeigt wird
def enter_forest(character):
    #ASCII-Kunst des Elfenwaldes
    elfenwald_ascii = """
           üå≤üå≥üå≤
      üå≥       üå≥  üå≤üå≥
    üå≤   üå≤  üå≥     üå≤
  üå≥   üå≥üå≤ üå≥  üå≤    üå≥
       üå≥   üå≤üå≥
         üå≥     üå≥
           üå≥üå≤
    """
    console.print(f"\nDu betrittst den mystischen Elfenwald. üå≥\n{elfenwald_ascii}")
    path_choice(character)

#nach Eintritt w√§hlt der Spieler einen der zwei Wege
#Auswahl wird wiederholt, wenn der Weg gesperrt ist
def path_choice(character):
    console.print("\nVor dir liegen zwei Wege:")
    console.print("1. Der linke Pfad, der von leuchtenden Pilzen ges√§umt ist. üçÑ")
    console.print("2. Der rechte Pfad, der durch dichtes Unterholz f√ºhrt. üåø")
    choice = Prompt.ask("W√§hle deinen Weg [1 oder 2]")
    check_quit(choice)

    if choice == "1":
        console.print("\nDer Pfad f√ºhrt dich tiefer in den Wald hinein.")
        item_selection(character)
    elif choice == "2":
        console.print("\nDer Weg ist versperrt! Du musst einen Schritt zur√ºckgehen.")
        path_choice(character)

#Spieler findet einen Schatz und je nach Charakter kann er sich nun ein Item ausw√§hlen.
def item_selection(character):
    if character == "1":
        items = {
            "1": "üó° Verzaubertes Schwert",
            "2": "üõ° Magischer Schild"
        }
    elif character == "2":
        items = {
            "1": "ü™Ñ Stab der Weisheit",
            "2": "üìú Verzaubertes Pergament"
        }

    console.print("\nDu findest einen verborgenen Schatz. W√§hle ein Item:")
    console.print(create_choice_panel("Verf√ºgbare Items:", items))

    choice = Prompt.ask("W√§hle ein Item", choices=list(items.keys()))
    check_quit(choice)

    item = items[choice]
    console.print(f"\nDu nimmst {item} an dich.")
    fight_enemy(character, item)

#Nach der Belohnung kommt der Spieler direkt zum ersten Kampf gegen einen Gegner.
def fight_enemy(character, item):
    console.print("\nEin Schattenwolf erscheint! üê∫")
    console.print(f"Du nutzt dein {item} im Kampf.")
    
    #Erfolg h√§ngt von Charakter und Item ab
    if character == "1" and item == "üó° Verzaubertes Schwert":
        #garantierter Sieg f√ºr Elfenkrieger mit Schwert
        console.print("[green]Du gewinnst den Kampf m√ºhelos dank deines verzauberten Schwertes![green]")
        elf_riddle(character, item)
    else:
        #sonst zuf√§lliger Erfolg
        success_rate = random.randint(1, 100)
        if success_rate > 50:
            console.print("[green]Du gewinnst den Kampf![green]")
            elf_riddle(character, item)
        else:
            console.print("[red]Du verlierst den Kampf und musst fliehen![red]")
            path_choice(character)

#nach dem gewonnenen Kampf erfolgt ein R√§tsel mit drei Versuchen
#Wenn erfolgreich gel√∂st, dann erh√§lt man eine Belohnung - sonst wird man "bestraft"
def elf_riddle(character, item):
    console.print("\nEine weise Elfe erscheint und stellt dir ein R√§tsel:")
    console.print("[italic cyan]'Ich bin nicht lebendig, aber ich wachse. Ich habe keine Lungen, aber ich brauche Luft. Was bin ich?'[/italic cyan]")
    attempts = 3
    while attempts > 0:
        answer = Prompt.ask(f"Deine Antwort ({attempts} Versuche √ºbrig)")
        check_quit(answer)
        if answer.lower() == "feuer":
            #bei richtiger Antwort 
            console.print("\n[green]Richtig![green] Die Elfe √ºberreicht dir einen magischen Trank. üß™")
            rescue_character(character, item, "Magischer Trank")
            return
        else:
            #bei falscher Antwort
            attempts -= 1
            console.print("\n[red]Falsch![/red]")

    #Strafe nach 3 Fehlversuchen
    console.print("\n[red]Du hast das R√§tsel nicht gel√∂st. Die Elfe ist entt√§uscht und entzieht dir Lebensenergie.[/red]")
    console.print("\n[red]Du f√ºhlst dich geschw√§cht.[/red]")
    rescue_character(character, item)

#Spieler h√∂rt Hilferufe, wenn er Hilf erh√§lt er Informationen und einen Begleiter
#Wenn dieser nicht hilft, dann zieht er alleine weiter
def rescue_character(character, item, bonus_item=None):
    console.print("\nDu h√∂rst Hilferufe aus der Ferne. üÜò")
    console.print("Ein Wanderer wird von Goblins angegriffen! üë∫")
    choice = Prompt.ask("M√∂chtest du ihm helfen?", choices=["ja", "nein"])
    check_quit(choice)

    if choice == "ja":
        #Spieler hilf und gewinnt einen Begleiter zur Unterst√ºtzung
        console.print("\nDu eilst zur Hilfe und vertreibst die Goblins!")
        console.print("Der gerettete Charakter schlie√üt sich dir an. ü§ù")
        console.print("Er erz√§hlt dir von dem gestohlenen magischen Kristall, der das K√∂nigreich retten kann.")
        final_battle(character, item, bonus_item, True)
    else:
        #Spieler ignoriert Hilferufe
        console.print("\nDu ignorierst die Hilferufe und gehst weiter.")
        final_battle(character, item, bonus_item, False)

#der gro√üe Finalkampf gegen eine dunkle Gestalt und deren Minions
#Wie der Kampf endet h√§ngt von dem bisherigen Weg des Spielers
def final_battle(character, item, bonus_item, companion):
    #ASCII-Kunst des magischen Kristalls
    magischer_kristall_ascii = """
        ‚ú®‚ú®‚ú®
       ‚ú®  *  ‚ú®
        * üíé *
       ‚ú®  *  ‚ú®
        ‚ú®‚ú®‚ú®
    """
    console.print("\nPl√∂tzlich tauchen die Minions der dunklen Gestalt auf! ‚öîÔ∏è")
    console.print("Ein Kampf entbrennt...")
    
    #der KAmpf besteht aus drei Runden, wo Aktionen gew√§hlt werden k√∂nnen
    for round_num in range(1, 4):
        console.print(f"\n[bold cyan]Runde {round_num} des Endkampfs![/bold cyan]")
        options = {
            "1": "Angriff mit deinem Hauptitem",
            "2": "Strategischer R√ºckzug",
            "3": "Den magischen Trank verwenden"
        }
        console.print(create_choice_panel("W√§hle deine Aktion:", options))

        action = Prompt.ask("Deine Wahl", choices=list(options.keys()))
        
        #je nach Wahl pro Runde
        if action == "1" and item:
            if companion:
                #Spieler mit Begleiter
                console.print(f"[bold green]Du nutzt dein {item} effektiv und schadest der dunklen Gestalt! Leider wurde dein Begleiter dabei verletzt ...[/bold green]")
            else:
                #Spieler ohne Begleiter
                console.print(f"[bold green]Du nutzt dein {item} effektiv und schadest der dunklen Gestalt, aber du bist auf dich allein gestellt. Der Kampf wird schwieriger ...[/bold green]")
        elif action == "2":
            console.print("[yellow]Du ziehst dich kurz zur√ºck, um eine bessere Position zu finden.[/yellow]")
        elif action == "3" and bonus_item:
            if companion:
                #Spieler mit Begleiter kann sich oder Begleiter st√§rken
                console.print("\n[bold blue]Du hast eine Wahl:[/bold blue]")
                sub_choice = Prompt.ask("M√∂chtest du dich oder deinen Begleiter st√§rken?", choices=["ich", "begleiter"])
                if sub_choice == "ich":
                    console.print(f"[bold blue]Du nutzt den {bonus_item}, um dich zu st√§rken![/bold blue]")
                else:
                    console.print(f"[bold blue]Du nutzt den {bonus_item}, um deinen Begleiter zu st√§rken![/bold blue]")
                    console.print("[italic red]'Wow danke - ich hab mich noch nie so stark gef√ºhlt!' sagt dein Begleiter, bevor er heroisch k√§mpft.")
            else:
                #Spieler ohne Begleiter kann nur sich st√§rken
                console.print(f"[bold blue]Du nutzt den {bonus_item}, um dich selbst zu st√§rken. Du brauchst jede Hilfe, die du bekommen kannst ...[/bold blue]")
        else:
            #kein effektive Aktion
            console.print("[red]Deine Aktion hatte keinen Effekt... Sei vorsichtig![/red]")
        
    #Ausgang des Kampfes je nach Ressourcen und Entscheidungen
    if item and companion and bonus_item:
        console.print("\n[bold green]Mit der Hilfe deines Begleiters, deinem Item und deinem Bonus-Item besiegst du die dunkle Gestalt endg√ºltig![/bold green]")
        console.print("‚ú® [bold green]Das K√∂nigreich ist gerettet![/bold green] ‚ú®")
    elif item and companion:
        console.print("\n[bold yellow]Du und dein Begleiter besiegen die dunkle Gestalt, aber der Sieg fordert einen hohen Preis.[/bold yellow]")
    elif item:
        console.print("\n[bold red]Du k√§mpfst tapfer, aber ohne Unterst√ºtzung kannst du die dunkle Gestalt nicht bezwingen.[/bold red]")
    else:
        console.print("\n[bold red]Ohne Ausr√ºstung und Hilfe hattest du keine Chance. Die dunkle Gestalt triumphiert.[/bold red]")

    end_game()

#Ende des Spiels
def end_game():
    console.print("\nDanke f√ºrs Spielen! üéâ")
    exit()

if __name__ == "__main__":
    start_game()
